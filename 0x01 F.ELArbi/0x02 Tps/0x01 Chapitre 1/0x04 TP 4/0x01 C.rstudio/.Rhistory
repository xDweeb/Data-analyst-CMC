getwd()
setwd()
setwd("C:/Users/xdweb/OneDrive/Documents/Data-analyst-CMC/0x01 F.ELArbi/0x02 Tps/0x04 TP 4/0x01 C.rstudio/")
file.create("TP_4.R")
file.edite("TP_4.R")
file.edit("TP_4.R")
L1 <- c("Rabat", "Marrakech", "Fès", "Tanger", "Casablanca")
L2 <- c("Paris", "Lyon", "Marseille", "Bordeaux", "Nice")
length(L1)
length(L2)
L1[1] <- "Agadir"  # Modification de la première ville de L1
VillesRegion1 <- L1[1:3]
L1_sorted <- sort(L1)
# 7. Inverser l’ordre de L1
L1_reversed <- rev(L1)
# 8. Générer un vecteur L3 contenant les valeurs 10, 20, 30, 40, …… 10000
L3 <- seq(10, 10000, by=10)
# 9. Créer un vecteur en générant les valeurs suivantes : (0 0 0 0 0 0 1 1 1 1 1 1 2 2 2 2 2 2)
vector_sequence <- rep(0:2, each=6)
# 10. Pour L3 afficher :
# a. le maximum
max_L3 <- max(L3)
# b. le minimum
min_L3 <- min(L3)
# c. la somme
sum_L3 <- sum(L3)
# d. la médiane
median_L3 <- median(L3)
# e. l'écart-type
sd_L3 <- sd(L3)
# Affichage des résultats
max_L3
min_L3
sum_L3
median_L3
sd_L3
# 1. Extraire les trois premiers caractères d'une chaîne X
X <- "Exemple"
X_substr <- substr(X, 1, 3)  # Extraction des 3 premiers caractères
# 2. Concaténer deux chaînes X et Y
Y <- " de chaîne"
X_Y_concat <- paste(X, Y, sep = "")  # Concaténation sans espace supplémentaire
# 3. Convertir une chaîne Z en majuscules
Z <- "bonjour"
Z_upper <- toupper(Z)  # Conversion en majuscules
# 4. Compter toutes les occurrences de "R" dans une chaîne T en utilisant grep
T <- "R est un langage de programmation, R est puissant"
occurrences_R <- length(grep("R", unlist(strsplit(T, ""))))  # Compte des occurrences de "R"
#Exercice 3
# 1. nchar() : Nombre de caractères dans une chaîne
chaine <- "Bonjour"
nchar_chaine <- nchar(chaine)  # Sortie attendue : 7
print(nchar_chaine)
# 2. substr() : Extraire une sous-chaîne de caractères
texte <- "Exemple"
substr_texte <- substr(texte, 1, 4)  # Sortie attendue : "Exem"
print(substr_texte)
# 3. paste() : Concaténer des chaînes de caractères avec espace
nom <- "Alice"
age <- 25
paste_nom_age <- paste(nom, age)  # Sortie attendue : "Alice 25"
print(paste_nom_age)
# 4. toupper() : Convertir une chaîne en majuscules
texte_bonjour <- "bonjour"
texte_upper <- toupper(texte_bonjour)  # Sortie attendue : "BONJOUR"
print(texte_upper)
# 5. tolower() : Convertir une chaîne en minuscules
texte_Bonjour <- "Bonjour"
texte_lower <- tolower(texte_Bonjour)  # Sortie attendue : "bonjour"
print(texte_lower)
# 6. paste0() : Concaténer sans espace
nom_john <- "John"
age_john <- 30
paste0_nom_age <- paste0(nom_john, age_john)  # Sortie attendue : "John30"
print(paste0_nom_age)
# 7. strsplit() : Diviser une chaîne en éléments d'un vecteur
phrase <- "Bonjour à tous"
strsplit_phrase <- strsplit(phrase, " ")  # Sortie attendue : list("Bonjour", "à", "tous")
print(strsplit_phrase)
# 8. gsub() : Remplacer des occurrences dans une chaîne
chaine_excellent <- "excellent"
gsub_chaine <- gsub("e", "E", chaine_excellent)  # Sortie attendue : "ExcellEnt"
print(gsub_chaine)
# 9. grep() : Rechercher des motifs dans une chaîne
liste_animaux <- c("chat", "chien", "oiseau")
grep_result <- grep("ch", liste_animaux)  # Sortie attendue : c(1, 2)
print(grep_result)
# 10. sub() : Remplacer la première occurrence dans une chaîne
chaine_sub <- "excellent"
sub_result <- sub("e", "E", chaine_sub)  # Sortie attendue : "Excellent"
print(sub_result)
# 11. sprintf() : Formatage de chaînes de caractères
nom_alice <- "Alice"
age_alice <- 25
sprintf_result <- sprintf("Nom: %s, Age: %d", nom_alice, age_alice)  # Sortie attendue : "Nom: Alice, Age: 25"
print(sprintf_result)
#Exercice 3
# 1. nchar() : Nombre de caractères dans une chaîne
chaine <- "Bonjour"
nchar_chaine <- nchar(chaine)  # Sortie attendue : 7
print(nchar_chaine)
# 2. substr() : Extraire une sous-chaîne de caractères
texte <- "Exemple"
substr_texte <- substr(texte, 1, 4)  # Sortie attendue : "Exem"
print(substr_texte)
# 3. paste() : Concaténer des chaînes de caractères avec espace
nom <- "Alice"
age <- 25
paste_nom_age <- paste(nom, age)  # Sortie attendue : "Alice 25"
print(paste_nom_age)
# 4. toupper() : Convertir une chaîne en majuscules
texte_bonjour <- "bonjour"
texte_upper <- toupper(texte_bonjour)  # Sortie attendue : "BONJOUR"
print(texte_upper)
# 5. tolower() : Convertir une chaîne en minuscules
texte_Bonjour <- "Bonjour"
texte_lower <- tolower(texte_Bonjour)  # Sortie attendue : "bonjour"
print(texte_lower)
# 6. paste0() : Concaténer sans espace
nom_john <- "John"
age_john <- 30
paste0_nom_age <- paste0(nom_john, age_john)  # Sortie attendue : "John30"
print(paste0_nom_age)
# 7. strsplit() : Diviser une chaîne en éléments d'un vecteur
phrase <- "Bonjour à tous"
strsplit_phrase <- strsplit(phrase, " ")  # Sortie attendue : list("Bonjour", "à", "tous")
print(strsplit_phrase)
# 8. gsub() : Remplacer des occurrences dans une chaîne
chaine_excellent <- "excellent"
gsub_chaine <- gsub("e", "E", chaine_excellent)  # Sortie attendue : "ExcellEnt"
print(gsub_chaine)
# 9. grep() : Rechercher des motifs dans une chaîne
liste_animaux <- c("chat", "chien", "oiseau")
grep_result <- grep("ch", liste_animaux)  # Sortie attendue : c(1, 2)
print(grep_result)
# 10. sub() : Remplacer la première occurrence dans une chaîne
chaine_sub <- "excellent"
sub_result <- sub("e", "E", chaine_sub)  # Sortie attendue : "Excellent"
print(sub_result)
# 11. sprintf() : Formatage de chaînes de caractères
nom_alice <- "Alice"
age_alice <- 25
sprintf_result <- sprintf("Nom: %s, Age: %d", nom_alice, age_alice)  # Sortie attendue : "Nom: Alice, Age: 25"
print(sprintf_result)
#Exercice 4
# 1. Créer une matrice de notes pour les stagiaires et les modules
notes <- matrix(c(15, 17, 12, 16, 18, 14, 16, 18, 13, 19, 15, 14),
nrow = 3, ncol = 4, byrow = TRUE)
# 2. Ajouter les noms des colonnes (modules) et des lignes (stagiaires)
colnames(notes) <- c("EGTSA206", "M201", "M203", "M204")
rownames(notes) <- c("Stagiaire1", "Stagiaire2", "Stagiaire3")
# 3. Afficher les noms des colonnes
print(colnames(notes))  # Noms des colonnes (modules)
# 4. Afficher les noms des lignes
print(rownames(notes))  # Noms des lignes (stagiaires)
# 5. Afficher la matrice
print(notes)
# 6. Afficher la dimension de la matrice
dim_notes <- dim(notes)  # Dimensions de la matrice
print(dim_notes)
# 7. Afficher le nombre d’éléments de la matrice
nb_elements <- length(notes)  # Nombre d'éléments de la matrice
print(nb_elements)
# 8. Calculer la moyenne par module
mean_par_module <- colMeans(notes)  # Moyenne par module (par colonne)
print(mean_par_module)
# 9. Calculer la moyenne par stagiaire
mean_par_stagiaire <- rowMeans(notes)  # Moyenne par stagiaire (par ligne)
print(mean_par_stagiaire)
# 10. Afficher le résumé statistique par stagiaire
resume_stagiaires <- apply(notes, 1, summary)  # Résumé statistique par stagiaire (par ligne)
print(resume_stagiaires)
# 11. Afficher le résumé statistique par module
resume_modules <- apply(notes, 2, summary)  # Résumé statistique par module (par colonne)
print(resume_modules)
#exercice 4 suit
# 1. Créer une liste `liste_notes` contenant les notes de trois stagiaires dans trois modules
liste_notes <- list(
Stagiaire1 = c(EGTSA206 = 15, M201 = 17, M203 = 12),
Stagiaire2 = c(EGTSA206 = 18, M201 = 14, M203 = 16),
Stagiaire3 = c(EGTSA206 = 13, M201 = 19, M203 = 15)
)
# 2. Afficher le nombre d’éléments dans la liste
nb_elements_liste <- length(liste_notes)
print(nb_elements_liste)  # Sortie attendue : 3
# 3. Afficher la structure de la liste
str(liste_notes)
# 4. Ajouter un nouveau vecteur `Stagiaire4` avec des notes supplémentaires à la liste `liste_notes`
Stagiaire4 <- c(EGTSA206 = 16, M201 = 18, M203 = 14)
liste_notes <- c(liste_notes, list(Stagiaire4 = Stagiaire4))
# 5. Ajouter les noms des stagiaires aux éléments de la liste
# (Déjà réalisé lors de la création de la liste dans l'étape 1 et 4 avec `Stagiaire1`, `Stagiaire2`, etc.)
# 6. Utiliser `unlist()` pour transformer la liste en un vecteur unique contenant toutes les notes
notes_vecteur <- unlist(liste_notes)
print(notes_vecteur)
# 7. Utiliser `sapply()` pour calculer la moyenne des notes de chaque stagiaire dans la liste
moyenne_notes_stagiaires <- sapply(liste_notes, mean)
print(moyenne_notes_stagiaires)
# 8. Utiliser `lapply()` pour arrondir les notes de chaque stagiaire à l’entier le plus proche
arrondi_notes_stagiaires <- lapply(liste_notes, round)
print(arrondi_notes_stagiaires)
# 9. Afficher un résumé statistique de chaque vecteur de notes dans la liste
resume_notes_stagiaires <- lapply(liste_notes, summary)
print(resume_notes_stagiaires)
# 10. Utiliser `View()` pour afficher le contenu de la liste
# View(liste_notes)  # Utilisable dans un environnement interactif comme RStudio
source("~/Data-analyst-CMC/0x01 F.ELArbi/0x02 Tps/0x04 TP 4/0x01 C.rstudio/TP_4.R", echo=TRUE)
